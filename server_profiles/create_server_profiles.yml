---
#
# Configure service Profiles
#

- name: Configure Service Profiles
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - ucs.yml

  vars:
    # Create an anchor for api_info that can be used throughout the file
    api_info: &api_info
      # if api_key vars are omitted, INTERSIGHT_API_KEY_ID, INTERSIGHT_API_PRIVATE_KEY,
      # and INTERSIGHT_API_URI environment variables used for API key data
      api_private_key: "{{ api_private_key | default(omit) }}"
      api_key_id: "{{ api_key_id | default(omit) }}"
      api_uri: "{{ api_uri | default(omit) }}"
      validate_certs: "{{ validate_certs | default(omit) }}"
  tasks:
    # Get the Organization Moid
    
    - name: Include vars file
      include_vars: "{{ filepath_server }}"
      run_once: true

    - include_tasks: gather_policy_info.yml


    - name: "Get Organization Moid"
      cisco.intersight.intersight_rest_api:
        <<: *api_info
        resource_path: /organization/Organizations
        query_params:
          $filter: "Name eq '{{ org_name }}'"
      register: org_resp
       

    - name: "Configure Server Profiles" 
      cisco.intersight.intersight_rest_api:
       <<: *api_info
       resource_path: /server/Profiles
       query_params:
        $filter: "Name eq 'SP-{{ item.name }}'"
       api_body: {
          "Action": "No-op",
          "Name": "SP-{{ item.name }}",
          "AssignedServer": {
            "Moid": "{{ item.server_moid }}",
            "ObjectType": "compute.Blade"
          },
          "PolicyBucket": [
                {
                  "Moid": "{{ boot_order_policy_details.api_response.Moid }}",
                  "ObjectType": "boot.PrecisionPolicy"
                },
                {
                  "Moid": "{{ vmedia_policy_details.api_response.Moid }}",
                  "ObjectType": "vmedia.Policy"
                },
                {
                  "Moid": "{{ kvm_policy_details.api_response.Moid }}",
                  "ObjectType": "kvm.Policy"
                },
                {
                  "Moid": "{{ ipmi_policy_details.api_response.Moid }}",
                  "ObjectType": "ipmioverlan.Policy"
                },
                {
                  "Moid": "{{ local_user_policy_details.api_response.Moid }}",
                  "ObjectType": "iam.EndPointUserPolicy"
                },
                {
                  "Moid": "{{ networkconfig_policy_details.api_response.Moid }}",
                  "ObjectType": "networkconfig.Policy"
                },
                {
                  "Moid": "{{ ntp_policy_details.api_response.Moid }}",
                  "ObjectType": "ntp.Policy"
                },
                {
                  "Moid": "{{ storage_policy_details.api_response.Moid }}",
                  "ObjectType": "storage.StoragePolicy"
                },
                {
                  "Moid": "{{ bios_policy_details.api_response.Moid }}",
                  "ObjectType": "bios.Policy"
                },
                {
                  "Moid": "{{ lan_connectivity_policy_details.api_response.Moid }}",
                  "ObjectType": "vnic.LanConnectivityPolicy"
                },
                {
                  "Moid": "{{ adapter_policy_details.api_response.Moid }}",
                  "ObjectType": "adapter.ConfigPolicy"
                },
              ],
              "TargetPlatform": "FIAttached",
              "Organization": {
                "Moid": "{{ org_resp.api_response.Moid }}"
              },
              Tags: [{Key: "configmode", Value: "ansible"},{Key: "prefix", Value: "{{ prefix }}"}],
              UuidAddressType: "NONE",
              UuidPool: null
       }  
      register: server_profile_resp
      delegate_to: localhost
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ inventory_list }}"
      run_once: true
